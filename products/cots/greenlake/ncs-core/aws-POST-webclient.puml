@startuml

participant "System"
participant "LCM API"
participant "aws.py"
participant "common.py"
participant "utils.py"
participant "pf9 client"

note left
  title (*): /aws/clusters/{uuid}/webcli
  description: Creates a webclient
end note

System ->"LCM API" : Call '/aws/clusters/{uuid}/webcli'
activate "LCM API"
note left #OrangeRed
    Required inputs are:
        uuid: cluster id
        region: part of POST body
        project: (option) project id of this cluster belong to
    How about sharing cluster to multiple projects here?
end note

"LCM API" -> "aws.py" :create_webcli(uuid, region, project)
activate "aws.py"
"aws.py" -> "aws.py": Get auth_token (see request.headers['X-Auth-Token'])

"aws.py" -> "common.py": create_webcli(auth_token, uuid, region, project)
activate "common.py"
"common.py" -> "utils.py": get_pf9_client_with_token(auth_token, region)
note left #OrangeRed
    Code is always defaulted to master region.
    Separation of DU might have some impact here if region
    name is not same.
end note

activate "utils.py"
"utils.py" -> "pf9 client": getClientForToken(authurl, auth_token, tenant=tenant)
"pf9 client" --> "utils.py": getClientForToken(...)
"utils.py" -> "common.py": getClientForToken(...)
deactivate "utils.py"

"common.py" -> "pf9 client": client.create_webcli(uuid, project) to get webcli url
alt
    "common.py" --> "aws.py": return (url, status code)
else  HTTP error
    "common.py" -> "common.py": raise exception

"common.py" --> "aws.py": return (url, status code)
deactivate "common.py"

"aws.py" --> "LCM API": return (url, status code)
deactivate "aws.py"

"LCM API" --> "System": Call '/aws/clusters/{uuid}/webcli'
deactivate "LCM API"

@enduml