@startuml


abstract class AbstractCollector

AbstractCollector <|-- CapacityCollector
AbstractCollector <|-- PerformanceCollector
AbstractCollector <|-- HealthCollector

class MetricAttributes {
    name: "used_capacity"
	desc: "used capacity of the cluster"
	provider: VsanCapacityProvider.get_used_capacity
	addon_labels: [clustername, ip]
}

class ClusterAttributes {
	clustername: "mycluster"
	ip: "10.1.100.200"
}

MetricAttributes *-- CapacityMetrics : contains
ClusterAttributes *-- CapacityMetrics : contains

class CapacityMetrics  {
	namespace: "vsan"
	ClusterAttributes: clusterAttr
    MetricAttributes: metricList
}

class DataProvider {
    def get_label(name)
}

DataProvider <|-- VsanCapacityProvider
DataProvider <|-- VsanPerformanceProvider
DataProvider <|-- VsanHealthProvider

class VsanCapacityProvider {
    get_available_capacity()
	get_used_capacity()
	get_utilized_percentage()
}

class VsanPerformanceProvider {
}


class VsanHealthProvider {
}


class AbstractCollector {
    {abstract} void collect(self)
}

VsanCapacityProvider *-- CapacityCollector : uses

class CapacityCollector {
    VsanCapacityProvider: capacityProvider
}

VsanPerformanceProvider *-- PerformanceCollector : uses

class PerformanceCollector {
    VsanPerformanceProvider: performanceProvider
}


VsanHealthProvider *-- HealthCollector : uses
class HealthCollector {
    VsanHealthProvider: healthProvider
}



@enduml