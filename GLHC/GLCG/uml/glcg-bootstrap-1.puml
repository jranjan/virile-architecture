@startuml


skinparam sequence {
    TitleFontSize 36
    TitleFontName Tahoma
    TitleFontColor DarkBlue


	ArrowColor DeepSkyBlue
	ActorBorderColor DeepSkyBlue
	LifeLineBorderColor blue
	LifeLineBackgroundColor #A9DCDF

	ParticipantBorderColor DeepSkyBlue
	ParticipantBackgroundColor DodgerBlue
	ParticipantFontName Impact
	ParticipantFontSize 20
	ParticipantFontColor #A9DCDF

	ActorBackgroundColor aqua
	ActorFontColor DeepSkyBlue
	ActorFontSize 17
	ActorFontName Aapex
}


header (C) Copyright 2019
footer author: Jyoti Ranjan

    |||
    |||
    |||

actor "GLHC Admin"
note over "GLHC Admin"
    The sequence diagram captures the workflow (or algorithm) 
    to bootstrap the GLCG. In this workflow, vCenter is 
    deployed in non-HA mode on independent ESXi host.

    The very minute details of installation of GUI application 
    is not too detailed to avoid cluttering the sequence diagram. 
    The scope of the diagram is to define the workflow for high 
    level design. For e.g. low level details of how to create
    RAID 10 lun using hpssacli or REDIS client or OneView in 
    case of Synergy is not covered.
end note

box "Seed machine" #LightGrey
    participant Client
end box

box "Management components" #LightBlue
    participant "Deployment Host"
    participant VCSA
    participant "Deployment Manager VM"
    participant "Deployment Manager"
end box

box "OmniStack components" #LightGreen
    participant "OmniStack Host"
end box

note over Client
    client is either a laptop or some machine to connect
    to ESXi host so that ESXi host can be configured and
    OS can be installed. The below workflow can be
    automated. The below mentioned workflow can be automated 
    using scripting languages.
end note

group Preparing deployment node
        |||
    "GLHC Admin" -> Client: Login
    "GLHC Admin" -> "Deployment Host": Power on the server
    "GLHC Admin" -> "Deployment Host": Create RAID lun
    "GLHC Admin" -> "Deployment Host": Mount ISO to ESXi
    "GLHC Admin" -> "Deployment Host": Install ESXi
        |||
end group


newpage

note over Client
    The below mentioned
    workflow can be automated using
    scripting languages.
end note

group Deploying management software(s)
        |||
    "GLHC Admin" -> Client: Login
    "GLHC Admin" -> Client: Download VCSA OVA
    "GLHC Admin" -> "Deployment Host": Request to create VCSA
    "GLHC Admin" -> VCSA: ssh to VCSA to verify its installation
    "GLHC Admin" -> "GLHC Admin": Note down VCSA url
        |||
    "GLHC Admin" -> "Deployment Host": Request to create "Deployment Manager VM"
    note over "Deployment Manager VM"
       As we are going to run windows installer, we need to
       do remote login to "Deployment Manager VM" from
       Client and run script to install arbiter.
    end note
    "GLHC Admin" -> "Deployment Manager VM": Login
    "GLHC Admin" -> "Deployment Manager VM": Run arbiter's msi installer inside VM
    "GLHC Admin" -> "Deployment Manager VM": Install Arbiter
        |||
    note over "Deployment Manager VM"
       Here we are going to run JAR file with parameters
       captured in yaml file. For this one needs to remote
       login to "Deployment Manager VM" and run the jar
       command.
    end note
    "GLHC Admin" -> "Deployment Manager VM": Login
    "GLHC Admin" -> "Deployment Manager VM": Download deployment manager's msi
    "GLHC Admin" -> "GLHC Admin": Prepare user input in yaml file
    "GLHC Admin" -> "Deployment Manager VM": Run jar file with user inputs
    "GLHC Admin" -> "Deployment Manager": Ensure installation is correct
        |||
    note over "Deployment Manager VM"
       Here as well, one needs to remote login
       to VCSA and install the web-plugin which is like
       a running some executables.
    end note
    "GLHC Admin" -> VCSA: Login
    "GLHC Admin" -> VCSA: Download the vSphere web-plugin
    "GLHC Admin" -> VCSA: Install web-plugin
    "GLHC Admin" -> VCSA: Restart VMware "vsphere-ui" service
        |||
    "GLHC Admin" -> "GLHC Admin": Verify deployment environment
        |||
end

newpage


note over "GLHC Admin"
    The below mentioned workflow can be automated using
    scripting languages.
end note


group Creating OmniStack cluster
        |||
    "GLHC Admin" -> Client: Login
    loop for every GLCG host
        "GLHC Admin" -> "OmniStack Host": Power on
        "GLHC Admin" -> "OmniStack Host": Assign static IP address
        "GLHC Admin" -> "GLHC Admin": Note down IP
    end
        |||
    "GLHC Admin" -> "Deployment Manager VM": Login
    "GLHC Admin" -> "Deployment Manager VM": Open "Deployment Manager"
    "GLHC Admin" -> "Deployment Manager": Create SimpliVity federation
    "GLHC Admin" -> "Deployment Manager": Feed Arbiter IP
    "GLHC Admin" -> "Deployment Manager": Scan OmniStack hosts
    "GLHC Admin" -> "Deployment Manager": Configure federation
    "GLHC Admin" -> "Deployment Manager": Configure network
    "GLHC Admin" -> "Deployment Manager": Configure NTP
    "GLHC Admin" -> "Deployment Manager": Run tests
        |||
end group

newpage

note over "Deployment Manager VM"
    The below mentioned workflow can be automated using
    scripting languages.
end note

group Preparing OmniStack cluster for consumption
        |||
   "GLHC Admin" -> Client: Login
   "GLHC Admin" -> "Deployment Manager VM": Open vCenter
   "GLHC Admin" -> "Deployment Manager VM": Create datastore
   "GLHC Admin" -> "Deployment Manager VM": Create backup policy (if desired)
        |||
end group

@enduml